import { expect, Locator, Page } from "@playwright/test";
const baseURL = 'https://staging.tmp1.dev'

export type SiteConfig = {
    server_name: string,
    server_type: 'ols' | 'nginx',
    site_title: string,
    php_version: string,
    wordpress_version: string,
};

export async function steps(page: Page, locatorElm: Locator)
{
    const elmHandle = await locatorElm.elementHandle();

    await expect(locatorElm).toBeVisible();
    if(!elmHandle) throw new Error('Process failed! Element not found...'+locatorElm);


    const result = await (await page.waitForFunction(
        (el) => {
            
            const afterContent = window.getComputedStyle(el, '::after').getPropertyValue('content');
            if (afterContent === '"\\e92b"') return 'success'; // Return 'success' if \e92b is found
            if (afterContent === '"\\e92a"') return 'failure'; // Return 'failure' if \e92a is found
            return null; // Keep waiting if neither is matched
        },
        elmHandle // Pass the element as an argument
    )).jsonValue();

    // Check the result and handle accordingly
    if (result === 'success') {
        console.log('Process succeeded, continuing to the next step...');
        return true;
        // Proceed to the next action
    } else if (result === 'failure') {
        throw new Error('Process failed! Throwing exception...');  // Throw an error if it's failure
    }
}

export const create_site = async (page: Page, {

    server_name,
    server_type,
    site_title,
    php_version,
    wordpress_version,

}: SiteConfig) => {
    await page.goto(`${baseURL}/login`);
    await page.getByPlaceholder('Email Address..').click();
    await page.getByPlaceholder('Email Address..').fill('reduan@wpdeveloper.com');
    await page.getByPlaceholder('Email Address..').press('Tab');
    await page.getByPlaceholder('********').fill('Pass@#123');
    await page.locator('span').filter({ hasText: 'Remember me' }).first().click();
    await page.getByRole('button', { name: 'Log In' }).click();
    await page.waitForURL(`${baseURL}/dashboard`)
    await page.goto(`${baseURL}/server`);
    await page.waitForURL(`${baseURL}/server`)
    // const response = await page.request.get(`${baseURL}/server`);
    //console.log(response.json());

    const server_grid_locator = await page.locator('//main[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[position()]');
    await page.getByRole('heading', { name: 'All Servers' }).waitFor();
    const server_count = await server_grid_locator.count()
    const servers = await server_grid_locator.all();
    console.log(await server_count)
    if (await server_count === 0) {
        console.log("There is no server")
    }
    else {
        console.log("Server Found");
        let foundServer = false;

        for (const server of servers) {

            const serverText = await server.innerText();
            if (server_name && serverText.match(server_name)) {
                foundServer = true;
                await server.click();
                await server.getByRole('link', { name: server_name }).click();

                await page.getByRole('link', { name: /New Site/i }).waitFor();
                await page.getByRole('link', { name: /New Site/i }).click();
                await page.getByText('Install New WordPress WebsiteSelect this option if you want to a create a fresh').click();
                await page.getByPlaceholder('Site Title').fill(`${site_title}`)
                await page.getByText('Demo Site Create a demo site').click();
                await page.getByRole('button', { name: 'More Advanced Settings' }).click();
                await page.getByLabel('PHP Version').selectOption(`${php_version}`);
                await page.getByRole('button', { name: 'Next' }).click();


                //Start the installing process
                await expect(page.getByRole('heading', { name: 'Checking and Verifying' })).toBeVisible();

                // await expect(page.getByText('[1/16] Checking Server')).toBeVisible();
                // First, find the element on the page
                // const element = await page.getByAltText(/\[1\/16\] Checking Server/i);
                await expect(steps(page, page.getByAltText(/\[1\/16\] Checking Server Storage & connectio/i))).toBeTruthy();
                await expect(steps(page, page.getByAltText(/\[2\/16\] Verifying DNS For Your Site/i))).toBeTruthy();
                await expect(page.getByRole('heading', { name: 'Installing Apps' })).toBeVisible();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[3\\/16\\] Installing PHP ${php_version}`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[4\\/16\\] Installing Database`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[5\\/16\\] Setting Up WordPress`, 'i')))).toBeTruthy();
                await expect(page.getByRole('heading', { name: 'Configuring' })).toBeVisible();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[6\\/16\\] Configuring SSL`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[7\\/16\\] Configuring HTTPS`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[8\\/16\\] Configuring Full Page Cache`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[9\\/16\\] Configuring Redis Object Cache`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[10\\/16\\] Configuring Nginx`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[11\\/16\\] Installing Blueprint`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[12\\/16\\] Deploy Script`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[13\\/16\\] Installing Monitoring`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[14\\/16\\] Installing WP Cron Job`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[15\\/16\\] Setting Up xCloud Managed Email Service`, 'i')))).toBeTruthy();
                await expect(steps(page, page.getByAltText(new RegExp(`\\[16\\/16\\] Finishing Up`, 'i')))).toBeTruthy();
                //End the installing process


                break;
            }


        }

        if (!foundServer) {
            console.log(`Server "${server_name}" not found.`);
        }

    }

}